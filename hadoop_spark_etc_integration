##用新書的步驟從頭到尾建一個好了..
##guest addition cd可以解決解析度跟延遲問題
##...16.04怎麼用一用卡住
##還是先學書用14.10
##天啊問題更多 一堆package安裝不了
##update to 15.04
##更新後就可了..

##安裝以用putty
sudo apt-get install openssh-server

#####
##如果享用root登入就要修正以下code
##access denied
/etc/ssh/sshd_config
##讓root可被登入
/etc/init.d/ssh restart
#####

######
##參考http://hadoopspark.blogspot.tw/2015/09/4-hadoop-26-single-node-cluster.html#more

java -version
sudo apt-get update
sudo apt-get install default-jdk
java -version
update-alternatives --display java

sudo apt-get install ssh
sudo apt-get install rsync
ssh-keygen -t dsa -P '' -f ~/.ssh/id_dsa
ll /home/hduser/.ssh
ll ~/.ssh
cat ~/.ssh/id_dsa.pub >> ~/.ssh/authorized_keys

wget http://ftp.twaren.net/Unix/Web/apache/hadoop/common/hadoop-2.6.0/hadoop-2.6.0.tar.gz
sudo tar -zxvf hadoop-2.6.0.tar.gz
sudo mv hadoop-2.6.0 /usr/local/hadoop
ll /usr/local/hadoop
rm hadoop-2.6.0.tar.gz

sudo gedit ~/.bashrc

export JAVA_HOME=/usr/lib/jvm/java-7-openjdk-amd64
export HADOOP_HOME=/usr/local/hadoop
export PATH=$PATH:$HADOOP_HOME/bin 
export PATH=$PATH:$HADOOP_HOME/sbin
export HADOOP_MAPRED_HOME=$HADOOP_HOME
export HADOOP_COMMON_HOME=$HADOOP_HOME
export HADOOP_HDFS_HOME=$HADOOP_HOME
export YARN_HOME=$HADOOP_HOME
export HADOOP_COMMON_HOME=$HADOOP_HOME
export HADOOP_HDFS_HOME=$HADOOP_HOME
export YARN_HOME=$HADOOP_HOME
export HADOOP_COMMON_LIB_NATIVE_DIR=$HADOOP_HOME/lib/native
export HADOOP_OPTS="-Djava.library.path=$HADOOP_HOME/lib"
export JAVA_LIBRARY_PATH=$HADOOP_HOME/lib/native:$JAVA_LIBRARY_PATH

source ~/.bashrc

sudo gedit /usr/local/hadoop/etc/hadoop/hadoop-env.sh

##修改
export JAVA_HOME=/usr/lib/jvm/java-7-openjdk-amd64

sudo gedit /usr/local/hadoop/etc/hadoop/core-site.xml

<property>
   <name>fs.default.name</name>
   <value>hdfs://localhost:9000</value>
</property> 

sudo gedit /usr/local/hadoop/etc/hadoop/yarn-site.xml

<property>
   <name>yarn.nodemanager.aux-services</name>
   <value>mapreduce_shuffle</value>
</property>
<property>
   <name>yarn.nodemanager.aux-services.mapreduce.shuffle.class</name>
   <value>org.apache.hadoop.mapred.ShuffleHandler</value>
</property>

sudo cp /usr/local/hadoop/etc/hadoop/mapred-site.xml.template /usr/local/hadoop/etc/hadoop/mapred-site.xml
sudo gedit /usr/local/hadoop/etc/hadoop/mapred-site.xml

<property>
   <name>mapreduce.framework.name</name>
   <value>yarn</value>
</property>

sudo gedit /usr/local/hadoop/etc/hadoop/hdfs-site.xml

<property>
   <name>dfs.replication</name>
   <value>3</value>
</property>
<property>
   <name>dfs.namenode.name.dir</name>
   <value> file:/usr/local/hadoop/hadoop_data/hdfs/namenode</value>
</property>
<property>
   <name>dfs.datanode.data.dir</name>
   <value> file:/usr/local/hadoop/hadoop_data/hdfs/datanode</value>
 </property>


sudo mkdir -p /usr/local/hadoop/hadoop_data/hdfs/namenode
sudo mkdir -p /usr/local/hadoop/hadoop_data/hdfs/datanode
sudo chown hduser:hduser -R /usr/local/hadoop
hadoop namenode -format

start-all.sh

#http://localhost:8088/
#http://localhost:50070/
######


##設定master跟slave的的話先用單機的再製
##然後做設定

##IP設定有問題
##用內建設定去改
##8.8.8.8
192.168.1.7  2 3 5
255.255.255.0
192.168.1.1
8.8.8.8



#http://192.168.1.7:50070/
##hdfs相關指令
hadoop fs -mkdir
hadoop fs -ls
hadoop fs -copyFromLocal
hadoop fs -put (跟copyfromlocal類似，不過是直接取代舊有檔案，不過問)
hadoop fs -copyToLocal
hadoop fs -get
hadoop fs -cp
hadoop fs -rm
##

hadoop fs -mkdir /user
hadoop fs -mkdir /user/hduser
hadoop fs -mkdir /user/hduser/test
hadoop fs -ls
hadoop fs -ls /
hadoop fs -ls /user
hadoop fs -ls /user/hduser
hadoop fs -ls -R /
hadoop fs -mkdir -p /dir1/dir2/dir3
hadoop fs -ls -R /

hadoop fs -copyFromLocal /usr/local/hadoop/README.txt /user/hduser/test
hadoop fs -copyFromLocal /usr/local/hadoop/README.txt /user/hduser/test/test1.txt
hadoop fs -ls /user/hduser/test

hadoop fs -cat /user/hduser/test/README.txt
hadoop fs -cat /user/hduser/test/README.txt|more

hadoop fs -copyFromLocal /usr/local/hadoop/NOTICE.txt /usr/local/hadoop/LICENSE.txt /user/hduser/test

hadoop fs -copyFromLocal /usr/local/hadoop/etc /user/hduser/test
hadoop fs -ls /user/hduser/test
hadoop fs -ls R /user/hduser/test/etc

hadoop fs -put /usr/local/hadoop/README.txt /user/hduser/test/test2.txt

echo echo.test | hadoop fs -put - /user/hduser/test/echoin.txt
hadoop fs -cat /user/hduser/test/echoin.txt

ls /usr/local/hadoop | hadoop fs -put - /user/hduser/test/hadooplist.txt
hadoop fs -cat /user/hduser/test/hadooplist.txt

mkdir test
cd test
hadoop fs -copyToLocal /user/hduser/test/hadooplist.txt

hadoop fs -copyToLocal /user/hduser/test/etc
hadoop fs -get /user/hduser/test/README.txt localREADME.txt
ll

hadoop fs -mkdir /user/hduser/test/temp
hadoop fs -cp /user/hduser/test/README.txt /user/hduser/test/temp
hadoop fs -ls /user/hduser/test/temp

hadoop fs -ls /user/hduser/test
hadoop fs -rm /user/hduser/test/test2.txt

hadoop fs -ls /user/hduser/test
hadoop fs -rm -R /user/hduser/test/etc

mkdir -p ~/wordcount/input
cd ~/wordcount

vim WordCount.java

##
import java.io.IOException;
import java.util.StringTokenizer;

import org.apache.hadoop.conf.Configuration;
import org.apache.hadoop.fs.Path;
import org.apache.hadoop.io.IntWritable;
import org.apache.hadoop.io.Text;
import org.apache.hadoop.mapreduce.Job;
import org.apache.hadoop.mapreduce.Mapper;
import org.apache.hadoop.mapreduce.Reducer;
import org.apache.hadoop.mapreduce.lib.input.FileInputFormat;
import org.apache.hadoop.mapreduce.lib.output.FileOutputFormat;

public class WordCount {

  public static class TokenizerMapper
       extends Mapper<Object, Text, Text, IntWritable>{

    private final static IntWritable one = new IntWritable(1);
    private Text word = new Text();

    public void map(Object key, Text value, Context context
                    ) throws IOException, InterruptedException {
      StringTokenizer itr = new StringTokenizer(value.toString());
      while (itr.hasMoreTokens()) {
        word.set(itr.nextToken());
        context.write(word, one);
      }
    }
  }

  public static class IntSumReducer
       extends Reducer<Text,IntWritable,Text,IntWritable> {
    private IntWritable result = new IntWritable();

    public void reduce(Text key, Iterable<IntWritable> values,
                       Context context
                       ) throws IOException, InterruptedException {
      int sum = 0;
      for (IntWritable val : values) {
        sum += val.get();
      }
      result.set(sum);
      context.write(key, result);
    }
  }

  public static void main(String[] args) throws Exception {
    Configuration conf = new Configuration();
    Job job = Job.getInstance(conf, "word count");
    job.setJarByClass(WordCount.class);
    job.setMapperClass(TokenizerMapper.class);
    job.setCombinerClass(IntSumReducer.class);
    job.setReducerClass(IntSumReducer.class);
    job.setOutputKeyClass(Text.class);
    job.setOutputValueClass(IntWritable.class);
    FileInputFormat.addInputPath(job, new Path(args[0]));
    FileOutputFormat.setOutputPath(job, new Path(args[1]));
    System.exit(job.waitForCompletion(true) ? 0 : 1);
  }
}

##

ll

sudo vim ~/.bashrc

##hadoop variables
#scala variables
export SCALA_HOME=/usr/local/scala
export PATH=$PATH:$SCALA_HOME/bin
#spark variables
export SPARK_HOME=/usr/local/spark
export PATH=$PATH:SPARK_HOME/bin
#
export PATH=${JAVA_HOME}/bin:${PATH}
export HADOOP_CLASSPATH=${JAVA_HOME}/lib/tools.jar


source ~/.bashrc

hadoop com.sun.tools.javac.Main WordCount.java
jar cf wc.jar WordCount*.class
ll


##這重做
cd ~/wordcount/input
wget https://raw.githubusercontent.com/arron-green/hadoop-city-farmers-market-example/master/input/pg5000.txt

hadoop fs -mkdir -p /user/hduser/wordcount/input
hadoop fs -copyFromLocal pg5000.txt /user/hduser/wordcount/input
hadoop fs -ls /user/hduser/wordcount/input

cd ~/wordcount
hadoop jar wc.jar WordCount /user/hduser/wordcount/input/pg5000.txt /user/hduser/wordcount/output

hadoop fs -ls /user/hduser/wordcount/output
hadoop fs -cat /user/hduser/wordcount/output/part-r-00000

##練習重做
cd ~/wordcount/input
rm pg5000.txt
wget https://raw.githubusercontent.com/arron-green/hadoop-city-farmers-market-example/master/input/pg5000.txt

hadoop fs -rm /user/hduser/wordcount/input/pg5000.txt
hadoop fs -ls /user/hduser/wordcount/input
hadoop fs -copyFromLocal pg5000.txt /user/hduser/wordcount/input
hadoop fs -ls /user/hduser/wordcount/input

cd ~/wordcount
hadoop fs -rm -R /user/hduser/wordcount/output
hadoop jar wc.jar WordCount /user/hduser/wordcount/input/pg5000.txt /user/hduser/wordcount/output
hadoop fs -ls /user/hduser/wordcount/output
hadoop fs -cat /user/hduser/wordcount/output/part-r-00000

##spark
wget http://www.scala-lang.org/files/archive/scala-2.11.6.tgz
tar xvf scala-2.11.6.tgz
sudo mv scala-2.11.6 /usr/local/scala
rm scala-2.11.6.tgz

wget https://archive.apache.org/dist/spark/spark-1.4.0/spark-1.4.0-bin-hadoop2.6.tgz
tar zxf spark-1.4.0-bin-hadoop2.6.tgz
sudo mv spark-1.4.0-bin-hadoop2.6 /usr/local/spark
rm spark-1.4.0-bin-hadoop2.6.tgz

spark-shell
exit

cd /usr/local/spark/conf
cp log4j.properties.template log4j.properties
sudo vim log4j.properties
#第一個INFO改為WARN

spark-shell --master local[2]
val textFile = sc.textFile("file:/usr/local/spark/README.md")
textFile.count

val textFile = sc.textFile("hdfs://localhost:9000/user/hduser/wordcount/input/pg5000.txt")
textFile.count

exit
##
SPARK_JAR=/usr/local/spark/lib/spark-assembly-1.4.0-hadoop2.6.0.jar HADOOP_CONF_DIR=/usr/local/hadoop/etc/hadoop MASTER=yarn-client /usr/local/spark/bin/spark-shell
val textFile = sc.textFile("file:/usr/local/spark/README.md")
textFile.count
val textFile = sc.textFile("hdfs://localhost:9000/user/hduser/wordcount/input/pg5000.txt")
textFile.count
##http://192.168.1.7:8088/cluster

cp /usr/local/spark/conf/spark-env.sh.template /usr/local/spark/conf/spark-env.sh
sudo vim /usr/local/spark/conf/spark-env.sh
/usr/local/spark/sbin/start-all.sh

spark-shell --master spark://hadoop:7077
#http://192.168.1.7:8080/

val textFile = sc.textFile("file:/usr/local/spark/README.md")
textFile.count
val textFile = sc.textFile("hdfs://localhost:9000/user/hduser/wordcount/input/pg5000.txt")
textFile.count
exit
/usr/local/spark/sbin/stop-all.sh
##
##
spark-shell
val intRDD = sc.parallelize(List(3,1,2,5,5))
intRDD.collect()

val stringRDD = sc.parallelize(List("Apple","Orange","Banana","Grape","Apple"))
stringRDD.collect()

def addOne(x:Int):Int={
	return(x+1)
}
intRDD.map(addOne).collect

intRDD.map(x=>x+1).collect()
intRDD.map(_+1).collect()

stringRDD.map(x=>"fruit:"+x).collect

intRDD.filter(x=>x<3).collect()
intRDD.filter(_<3).collect()

stringRDD.filter(x=>x.contains("ra")).collect()

intRDD.distinct().collect()
stringRDD.distinct().collect()

val sRDD = intRDD.randomSplit(Array(0.4,0.6))
sRDD(0).collect()
sRDD(1).collect()

val gRDD=intRDD.groupBy(x=>{if(x%2==0)"even" else "odd"}).collect
gRDD(0)
gRDD(1)

##
val intRDD1 = sc.parallelize(List(3,1,2,5,5))
val intRDD2 = sc.parallelize(List(5,6))
val intRDD3 = sc.parallelize(List(2,7))

intRDD1.union(intRDD2).union(intRDD3).collect
(intRDD1++intRDD2++intRDD3).collect()

intRDD1.intersection(intRDD2).collect()
intRDD1.subtract(intRDD2).collect()

intRDD1.cartesian(intRDD2).collect()

##
intRDD.first
intRDD.take(2)
intRDD.takeOrdered(3)
intRDD.takeOrdered(3)(Ordering[Int].reverse)

intRDD.stats
intRDD.min
intRDD.max
intRDD.stdev
intRDD.count
intRDD.sum
intRDD.mean

##第一個是key 第二個是value
val kvRDD1 = sc.parallelize(List((3,4),(3,6),(5,6),(1,2)))
kvRDD1.keys.collect()
kvRDD1.values.collect()
kvRDD1.filter{case (key,value)=>key<5}.collect()
kvRDD1.filter{case (key,value)=>value<5}.collect()
kvRDD1.mapValues(x=>x*x).collect

kvRDD1.sortByKey().collect
kvRDD1.sortByKey(true).collect
kvRDD1.sortByKey(false).collect

kvRDD1.reduceByKey((x,y)=>x+y).collect
kvRDD1.reduceByKey(_+_).collect

val kvRDD1 = sc.parallelize(List((3,4),(3,6),(5,6),(1,2)))
val kvRDD2 = sc.parallelize(List((3,8)))

kvRDD1.join(kvRDD2).foreach(println)
kvRDD1.leftOuterJoin(kvRDD2).foreach(println)
kvRDD1.rightOuterJoin(kvRDD2).foreach(println)
kvRDD1.subtractByKey(kvRDD2).collect

kvRDD1.first()
kvRDD1.take(2)

val kvFirst = kvRDD1.first
kvFirst._1
kvFirst._2

kvRDD1.countByKey()
var KV=kvRDD1.collectAsMap()
KV(3)
KV(1)
KV(5)

kvRDD1.lookup(3)
kvRDD1.lookup(5)
kvRDD1.lookup(1)

##不使用broadcast
val kvFruit = sc.parallelize(List((1,"Appple"),(2,"Orange"),(3,"Banana"),(4,"Grape")))
val fruitMap = kvFruit.collectAsMap()
val fruitIds = sc.parallelize(List(2,4,1,3))
val fruitNames = fruitIds.map(x=>fruitMap(x)).collect

##broadcast
val bcFruitMap = sc.broadcast(fruitMap)
val fruitNames = fruitIds.map(x=>bcFruitMap.value(x)).collect

##accumulator
val intRDD = sc.parallelize(List(3,1,2,5,5))
val total = sc.accumulator(0.0) //double
val num = sc.accumulator(0)
intRDD.foreach(i=>{
	total += i
	num += i
})
println("total="+total.value+", num="+num.value)
val avg = total.value/num.value

##

val intRddMemory = sc.parallelize(List(3,1,2,5,5))
intRddMemory.persist()
intRddMemory.unpersist()

import org.apache.spark.storage.StorageLevel
val intRddMemoryAndDisk = sc.parallelize(List(3,1,2,5,5))
intRddMemoryAndDisk.persist(StorageLevel.MEMORY_AND_DISK)
intRddMemoryAndDisk.unpersist()

mkdir -p ~/workspace/WordCount/data
cd ~/workspace/WordCount/data
vim test.txt
spark-shell

val textFile = sc.textFile("file:/home/hduser/workspace/WordCount/data/test.txt")
val stringRDD = textFile.flatMap(line=>line.split(" "))
val countsRDD = stringRDD.map(word=>(word,1)).reduceByKey(_+_)
countsRDD.saveAsTextFile("file:/home/hduser/workspace/WordCount/data/output")
exit

ll
cd output
ll
cat part-00000

##
spark-shell
val textFile = sc.textFile("file:/home/hduser/workspace/WordCount/data/test.txt")
textFile.foreach(println)
val stringRDD = textFile.flatMap(line=>line.split(" "))
stringRDD.collect

textFile.map(line=>line.split(" ")).collect
textFile.flatMap(line=>line.split(" ")).collect

stringRDD.map(word=>(word,1)).foreach(println)
stringRDD.map((_,1)).foreach(println)
stringRDD.map(word=>(word,1)).reduceByKey((x,y)=>(x+y)).foreach(println)
stringRDD.map((_,1)).reduceByKey(_+_).foreach(println)

##
##how-to-share-files-between-windows-and-linux/
##http://www.howtogeek.com/176471/how-to-share-files-between-windows-and-linux/
##https://briian.com/6241/virtualbox-share-folder.html
#設定windows跟虛擬機unbuntu共享資料夾
#https://briian.com/6241/virtualbox-share-folder.html/2

